= Ecrire de la documentation pour un projet libre
Fabrice_Flore-Thebault <fab@centsix.org>
:Date:      2011
:Revision:  1
:lang: fr

== L'auteur : Fabrice Flore-Thébault 

Auteur de documentation dans des projets libres :

- GLPI
- Rudder 

Sysadmin, consultant en logiciels libres et ... auteur de documentation dans des infrastructures IT :

- Emakina
- Mediaxim
- Centre Hospitalier Jean Titeca
- ...


== La place du "technical writer"

- Un non développeur dans une équipe de développeurs.

[quote]
"Comment, quelqu'un qui ne lit pas le code ?" 

- Nécessaire adaptation réciproque.

- Jeu des questions-réponses.

== Les objectifs

=== S'adapter au projet

- Un projet comme les autres.

- Traiter la documentation comme le reste du code.

=== Faciliter la vie des auteurs

- Simplicité pour l'auteur (outil, syntaxe).

- Ne pas imposer un outil d'édition.

- Pouvoir travailler offline.

- Pouvoir travailler à plusieurs.

== Contrôle de version

- Utiliser le même outil de gestion de version que le reste du projet.

- Intégration à la forge.

[TIP]
Git, Subversion, Redmine

== Intégration continue

- Utiliser le même outil d'intégration continue que le reste du projet.

- Déploiement continu : mieux qu'un CMS !

[TIP]
Makefile, Jenkins

== Choix des outils : CMS? Wiki?

- Impossible de travailler offline.

- Pénible gestion d'édition concurrente.

- "Ma page n'a pas été sauvegardée!"

- Et le format papier ?

== Choix des outils : Opendocument ?

- Difficile séparation du style.

- Pénible à versionner.

- Impose un outil d'édition lourd.

== Choix des outils : LaTeX ?

- Syntaxe pénible pour l'auteur.

- Impose l'utilisation d'un éditeur spécialisé.

- Reste un incontournable format intermédiaire pour produire de la documentation à
  imprimer.

== Choix des outils : XML ? Dita ? Docbook ?

- Syntaxe pénible pour l'auteur.

- Riche, trop riche.

- Impose de facto l'utilisation d'un éditeur lourd.

- Docbook : un bon format intermédiaire.

== Choix des outils : Langages de markup simple : RST ? Asciidoc !

- Syntaxe simple pour l'auteur.

- Asciidoc + Graphviz, le duo gagnant.

== Mise en oeuvre de Asciidoc

- "include" rulez

- utilisation de scripts pour ordonner le contenu et générer le document maître

- feuille de style pour la sortie XHTML

- feuille de style pour la sortie PDF

== L'impact qualité  pour le projet

== Rapports de bugs

- Tests extensifs de l'application.

- Regard extérieur.

== Ergonomie

- Une interface ergonomique demande moins d'explications.

- Modification de l'interface utilisateur.
